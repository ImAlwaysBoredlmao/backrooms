{{WIP}}
= backrooms =
'''backrooms''' uses a 3d memory spaces that holds a single Extended ASCII character per room “cell”. It has 10 registers and 2 built in stacks. Rule’s “instructions” can be more than one character long. It also has 5 data types.

== About ==
* Author: '''Charles McMarrow'''
* Conceived: '''5/22/2021'''
* Birthday: TBA

Official Interpreter:
* https://github.com/cmcmarrow/backrooms
* '''pip install backrooms'''

backrooms was inspired by:
* backrooms Creepypasta/MEME
* ASCIIDOTS Esolang
* CISC Architecture

Backrooms was designed to be:
* hackable VIA memory overflow attacks, poor error handling, ect.
* visually pleasing.
* enjoyable to write small/medium programs.
* capable to rewrite all of a program at run-time.

== Hello World ==
 ~GATE
 /rs"Hello World!"e~ha

== Hello World 2 ==
 ~GATE
 /V
 /r
 /s
 /+
 /H
 /e
 /l
 /l
 /o
 /
 /W
 /o
 /r
 /l
 /d
 /!
 /+
 /~
 /h
 /a

== Data Types ==
* Integer
** -infinity to infinity
* String
** extended ASCII characters only
** a size 0 to infinity
* None
* StackFrame
* StackBottom

== Meta-Language ==
* ::= is a definition
* | alternative definition
* [ ] optional
* { } zero or more occurrences
* ( ) only one occurrence
* x non-terminal symbol x
* "x" terminal symbol x
* \x99 byte reputation of character "c"
* "\"" terminal symbol "

=== Meta-Language Implementation ===
* DIGIT ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")
* CHARACTER ::= (\x0 | \x1 | \x2 | \x3 | \x4 | \x5 | \x6 | \x7 | \x8 | \x9 | \x10 | \x11 | \x12 | \x13 | \x14 | \x15 | \x16 | \x17 | \x18 | \x19 | \x20 | \x21 | \x22 | \x23 | \x24 | \x25 | \x26 | \x27 | \x28 | \x29 | \x30 | \x31 | \x32 | \x33 | \x34 | \x35 | \x36 | \x37 | \x38 | \x39 | \x40 | \x41 | \x42 | \x43 | \x44 | \x45 | \x46 | \x47 | \x48 | \x49 | \x50 | \x51 | \x52 | \x53 | \x54 | \x55 | \x56 | \x57 | \x58 | \x59 | \x60 | \x61 | \x62 | \x63 | \x64 | \x65 | \x66 | \x67 | \x68 | \x69 | \x70 | \x71 | \x72 | \x73 | \x74 | \x75 | \x76 | \x77 | \x78 | \x79 | \x80 | \x81 | \x82 | \x83 | \x84 | \x85 | \x86 | \x87 | \x88 | \x89 | \x90 | \x91 | \x92 | \x93 | \x94 | \x95 | \x96 | \x97 | \x98 | \x99 | \x100 | \x101 | \x102 | \x103 | \x104 | \x105 | \x106 | \x107 | \x108 | \x109 | \x110 | \x111 | \x112 | \x113 | \x114 | \x115 | \x116 | \x117 | \x118 | \x119 | \x120 | \x121 | \x122 | \x123 | \x124 | \x125 | \x126 | \x127 | \x128 | \x129 | \x130 | \x131 | \x132 | \x133 | \x134 | \x135 | \x136 | \x137 | \x138 | \x139 | \x140 | \x141 | \x142 | \x143 | \x144 | \x145 | \x146 | \x147 | \x148 | \x149 | \x150 | \x151 | \x152 | \x153 | \x154 | \x155 | \x156 | \x157 | \x158 | \x159 | \x160 | \x161 | \x162 | \x163 | \x164 | \x165 | \x166 | \x167 | \x168 | \x169 | \x170 | \x171 | \x172 | \x173 | \x174 | \x175 | \x176 | \x177 | \x178 | \x179 | \x180 | \x181 | \x182 | \x183 | \x184 | \x185 | \x186 | \x187 | \x188 | \x189 | \x190 | \x191 | \x192 | \x193 | \x194 | \x195 | \x196 | \x197 | \x198 | \x199 | \x200 | \x201 | \x202 | \x203 | \x204 | \x205 | \x206 | \x207 | \x208 | \x209 | \x210 | \x211 | \x212 | \x213 | \x214 | \x215 | \x216 | \x217 | \x218 | \x219 | \x220 | \x221 | \x222 | \x223 | \x224 | \x225 | \x226 | \x227 | \x228 | \x229 | \x230 | \x231 | \x232 | \x233 | \x234 | \x235 | \x236 | \x237 | \x238 | \x239 | \x240 | \x241 | \x242 | \x243 | \x244 | \x245 | \x246 | \x247 | \x248 | \x249 | \x250 | \x251 | \x252 | \x253 | \x254 | \x255)
* COMMENT_CHARACTER ::= (\x0 | \x1 | \x2 | \x3 | \x4 | \x5 | \x6 | \x7 | \x8 | \x9 | \x11 | \x12 | \x13 | \x14 | \x15 | \x16 | \x17 | \x18 | \x19 | \x20 | \x21 | \x22 | \x23 | \x24 | \x25 | \x26 | \x27 | \x28 | \x29 | \x30 | \x31 | \x32 | \x33 | \x34 | \x35 | \x36 | \x37 | \x38 | \x39 | \x40 | \x41 | \x42 | \x43 | \x44 | \x45 | \x46 | \x47 | \x48 | \x49 | \x50 | \x51 | \x52 | \x53 | \x54 | \x55 | \x56 | \x57 | \x58 | \x59 | \x60 | \x61 | \x62 | \x63 | \x64 | \x65 | \x66 | \x67 | \x68 | \x69 | \x70 | \x71 | \x72 | \x73 | \x74 | \x75 | \x76 | \x77 | \x78 | \x79 | \x80 | \x81 | \x82 | \x83 | \x84 | \x85 | \x86 | \x87 | \x88 | \x89 | \x90 | \x91 | \x92 | \x93 | \x94 | \x95 | \x96 | \x97 | \x98 | \x99 | \x100 | \x101 | \x102 | \x103 | \x104 | \x105 | \x106 | \x107 | \x108 | \x109 | \x110 | \x111 | \x112 | \x113 | \x114 | \x115 | \x116 | \x117 | \x118 | \x119 | \x120 | \x121 | \x122 | \x123 | \x124 | \x125 | \x126 | \x127 | \x128 | \x129 | \x130 | \x131 | \x132 | \x133 | \x134 | \x135 | \x136 | \x137 | \x138 | \x139 | \x140 | \x141 | \x142 | \x143 | \x144 | \x145 | \x146 | \x147 | \x148 | \x149 | \x150 | \x151 | \x152 | \x153 | \x154 | \x155 | \x156 | \x157 | \x158 | \x159 | \x160 | \x161 | \x162 | \x163 | \x164 | \x165 | \x166 | \x167 | \x168 | \x169 | \x170 | \x171 | \x172 | \x173 | \x174 | \x175 | \x176 | \x177 | \x178 | \x179 | \x180 | \x181 | \x182 | \x183 | \x184 | \x185 | \x186 | \x187 | \x188 | \x189 | \x190 | \x191 | \x192 | \x193 | \x194 | \x195 | \x196 | \x197 | \x198 | \x199 | \x200 | \x201 | \x202 | \x203 | \x204 | \x205 | \x206 | \x207 | \x208 | \x209 | \x210 | \x211 | \x212 | \x213 | \x214 | \x215 | \x216 | \x217 | \x218 | \x219 | \x220 | \x221 | \x222 | \x223 | \x224 | \x225 | \x226 | \x227 | \x228 | \x229 | \x230 | \x231 | \x232 | \x233 | \x234 | \x235 | \x236 | \x237 | \x238 | \x239 | \x240 | \x241 | \x242 | \x243 | \x244 | \x245 | \x246 | \x247 | \x248 | \x249 | \x250 | \x251 | \x252 | \x253 | \x254 | \x255)
* NUMBER ::= ["+" | "-"] DIGIT {DIGIT}
* LETTER ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"
* NAME ::= (LETTER | DIGIT | "_"){LETTERS | DIGIT | "_"}
* INPUT ::= {LETTER | DIGIT | "," | "<" | "." | "> " | "/" | "?" | ";" | ":" | "'" | "\"" | "[" | "{" | "]" | "}" | "\\" | "|" | "`" | "!" | "@" | "#" | "$" | "%" | "^" | "&" | "*" | "(" | ")" | "-" | "_" | "=" | "+" | " "}
* ROW_CHARACTER ::= (LETTER | DIGIT | "," | "<" | "." | "> " | "/" | "?" | ";" | ":" | "'" | "\"" | "[" | "{" | "]" | "}" | "\\" | "|" | "`" | "!" | "@" | "#" | "$" | "%" | "^" | "&" | "*" | "(" | ")" | "-" | "_" | "=" | "+" | " " | "~")
* NEWLINE ::= "\n"
* WHITESPACE ::= {"\t" | "\r" | "\v" |"\f" | " "}

== Translator ==
Note: The Translator throw's away unnecessary WHITESPACE.
* ROW ::= "/" {ROW_CHARACTER} NEWLINE
* COMMENT ::= "#" {COMMENT_CHARACTER} NEWLINE
* HALLWAY ::= "~" [NAME | "@"] NEWLINE
* FLOOR ::= "+" [NAME | "@"] NEWLINE
* INCLUDE ::= "%" NAME NEWLINE
* MUST_INCLUDE ::= "!" NAME NEWLINE
* PARALLEL ::= "=" [NAME | "@"] [NAME | "@"] [NUMBER | "@"] [NUMBER | "@"] NEWLINE
* X ::= "X" NUMBER NEWLINE
* XS ::= "XS" NUMBER NEWLINE
* Y ::= "Y" NUMBER NEWLINE
* YS ::= "YS" NUMBER NEWLINE
* F ::= "F" NUMBER NEWLINE
* FS ::= "FS" NUMBER NEWLINE
* Translator ::= {ROW | COMMENT | HALLWAY | FLOOR | INCLUDE | MUST_INCLUDE | PARALLEL | X | XS | Y | YS | F | FS}

== Rules ==
Rules AKA Instructions

=== BackMirror ===
 \

=== BranchLessThanZero ===
 L

=== BranchGreaterThanZero ===
 G

=== BranchZero ===
 Z

=== BranchNotZero ===
 N

=== BranchIsInteger ===
 I

=== BranchIsString ===
 S

=== BranchIsNone ===
 O

=== BranchIsStackFrame ===
 F

=== BranchIsStackBottom ===
 B

=== Cite ===
 c

=== ClearStack ===
 n

=== CoordinateX ===
 x

=== CoordinateY ===
 y

=== CoordinateFloor ===
 f

=== Duplicate ===
 d

=== Echo ===
 e

=== ForwardMirror ===
 /

=== HallwayCall ===
 hc

=== HallwayLevelCall ===
 hl

=== HallwayReturn ===
 hr

=== HallwayGetName ===
 hn

=== HallwayGetLocation ===
 hg

=== HallwaySet ===
 hs

=== HallwayRemove ===
 hd

=== HallwayPast ===
 hp

=== HallwayNext ===
 he

=== Halt ===
 ~ha

=== Hope ===
 *

=== Keep ===
 k

=== IntegerCast ===
 ic

=== IntegerAdd ===
 ia

=== IntegerSubtract ===
 is

===  IntegerMultiply ===
 im

=== IntegerDivide ===
 id

=== IntegerModular ===
 io

=== IntegerPower ===
 ip

=== IntegerByte ===
 ib

=== IntegerAbsolute ===
 il

=== LevelGetFloorName ===
 ln

=== LevelGetFloorLevel ===
 ll

=== LevelSetFloorName ===
 ls

=== Pop ===
 p

=== PopFrame ===
 a

=== Read ===
 r

=== ShifterRight ===
 >

=== ShifterLeft ===
 <

=== ShifterUp ===
 ^

=== ShiftDown ===
 v

=== ShifterDownUpper ===
 V

=== ShifterUpper ===
 {

=== ShifterLower ===
 }

=== Store ===
 s

=== StringLength ===
 bl

=== StringCast ===
 bc

=== StringAt ===
 ba

=== StringByte ===
 bb

=== StringSplit ===
 bs

=== StringJoin ===
 bj

=== StringEqual ===
 be

=== StringIn ===
 bi

=== StringUpper ===
 bu

=== StringLower ===
 bo

=== Switch ===
 z

=== ThreadThread ===
 tt

=== ThreadJoin ===
 tj

=== ThreadID ===
 ti

=== ThreadLock ===
 tl

=== ThreadUnLock ===
 tu

=== UncommonReadFlip ===
 ur

=== UncommonWriteFlip ===
 uw

=== UncommonHotPatch ===
 uh

=== UncommonSimpleDump ===
 us

=== UncommonDynamicDump ===
 ud

=== UncommonDoubleDuplicate ===
 uo

=== Write ===
 w


== Scripts ==
* Scripts can have the file extension ".brs" or no extension at all.
* Other Scripts in the same main directory can be included.
* The include check order is main directory then built-in directory of a script.

== Built-In Scripts  ==
Although its not necessary for a backrooms interpreter to supply built-in script. The official one does offer scripts that makes it much easier to allocate memory and handle data structures.
* brs_heap
* brs_heap_load
* brs_si_vector
* brs_si_vector_load
* brs_struct
* brs_utils
* brs_variables
* brs_variables_load
* brs_vector

== Programs ==
=== bottles ===
 ~GATE
 /ri10ibri99>ers" bottles of beer on the wall, "epers" bottles of beer."epzezri-1iaV
 /Vzeezpe".llaw eht no reeb fo selttob "srepe" ,dnuora ti ssap dna nwod eno ekaT"sr<
 /.>e~ha    1 >rs"1 bottle of beer on the wall, 1 bottle of beer."epers"Take one"epV
 /.p        p pVe".llaw eht no reeb fo selttob erom on ,dnuora ti ssap dna nwod "sr<
 /.e        . p>peers"No more bottles of beer on the wall, no more bottles of beer"V
 />.dri-1iaN^.^                                                                    e
 / ^".llaw eht no reeb fo selttob 99 ,erom emos yub dna erots eht ot oG"srepe"."srp<

=== turing ===
 # 1 will echo forever and 0 will echo a single time.
 # Any other input will default to a 1.
 ~GATE
 /cicOvZVpri1V
 /    p >.e>NV~ha
 /    >ri1e^e<

[[Category:Implemented]]
[[Category:Languages]]
[[Category:Turing complete]]
[[Category:2021]]
